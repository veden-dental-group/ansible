---
- include: setup-Redhat.yml
  when: ansible_os_family == "RedHat"

- include: setup-Debian.yml
  when: ansible_os_family == "Debian"

  # make it so that anyone can use it!
- name: Create the target VNM dir
  file: path="{{ nvm_dir }}" state=directory owner="{{ nvm_user_name }}" mode="o+rwx"

  # variablize the name of the installation script so it fire installation script properly when
  # updating from version to version
- name: Copy over nvm installation script
  template: src="install_nvm.script.j2" dest="{{ nvm_dir }}/install_nvm_{{ nvm_node_version }}.script"
            mode="u+x,g+x" owner="{{ nvm_user_name }}"
  register: "nvm_installation_script_template"

- name: Execute the nvm installation script
  command: "{{ nvm_dir }}/install_nvm_{{ nvm_node_version }}.script"
  when: nvm_installation_script_template is defined and nvm_installation_script_template.changed
  # the tag is needed so that linter wouldn't complain about this not being handler,
  # and handlers are so unstable I eventually decided not to use them in this role
  tags: skip_ansible_lint

- name: Add the NVM's variables to all the profiles in the system (Debian)
  blockinfile: |
    dest=/etc/bash.bashrc backup=no
    insertbefore="# If not running interactively"
    content="export NVM_DIR=\"{{ nvm_dir }}\"
             [ -s \"$NVM_DIR/nvm.sh\" ] && \. \"$NVM_DIR/nvm.sh\"
             [ -s \"$NVM_DIR/bash_completion\" ] && \. \"$NVM_DIR/bash_completion\""
  when: ansible_os_family == "Debian"

- name: Add the NVM's variables to all the profiles in the system (RedHat)
  blockinfile: |
    dest=/etc/bashrc backup=no
    content="export NVM_DIR=\"{{ nvm_dir }}\"
             [ -s \"$NVM_DIR/nvm.sh\" ] && \. \"$NVM_DIR/nvm.sh\"
             [ -s \"$NVM_DIR/bash_completion\" ] && \. \"$NVM_DIR/bash_completion\""
  when: ansible_os_family == "RedHat"

- name: Make the node binary always discoverable by symlinking to a system bin PATH that cron sees by default too
  file: src="{{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/bin/node"
        dest="/usr/bin/node" state=link mode="u+rwx,g+rx,o+rx"

- name: Make the npm binary always discoverable by symlinking to a system bin PATH that cron sees by default too
  file: src="{{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/bin/npm"
        dest="/usr/bin/npm" state=link mode="u+rwx,g+rx,o+rx"

### ---- Install version-agnostic and version-aware version of globals ---- ###
### TODO: DRY it some way smart

- name: Install global packages (version and name given)
  shell:
    cmd: ". /root/.bashrc && {{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/bin/npm \
    install --global {{ item.name }}@{{ item.version }}"
    creates: "{{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/lib/node_modules/{{ item.name }}"
  loop: "{{ nvm_install_globally }}"
  when: item.name is defined and item.version is defined and item.flags is not defined

- name: Install global packages (version, flags and name given)
  shell:
    cmd: ". /root/.bashrc && {{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/bin/npm \
    install --global {{ item.flags }} {{ item.name }}@{{ item.version }}"
    creates: "{{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/lib/node_modules/{{ item.name }}"
  loop: "{{ nvm_install_globally }}"
  when: item.name is defined and item.version is defined and item.flags is defined

- name: Install global packages (name given in plain string - hopefully)
  shell:
    cmd: ". /root/.bashrc && {{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/bin/npm \
    install --global {{ item }}"
    creates: "{{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/lib/node_modules/{{ item }}"
  loop: "{{ nvm_install_globally }}"
  when: item.name is not defined

- name: Install global packages (just name given in a dictionary)
  shell:
    cmd: ". /root/.bashrc && {{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/bin/npm \
    install --global {{ item.name }}"
    creates: "{{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/lib/node_modules/{{ item.name }}"
  loop: "{{ nvm_install_globally }}"
  when: item.name is defined and item.version is not defined and item.flags is not defined

- name: Install global packages (name and flags given in a dictionary )
  shell:
    cmd: ". /root/.bashrc && {{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/bin/npm \
    install --global {{ item.flags }} {{ item.name }}"
    creates: "{{ nvm_dir }}/versions/node/v{{ nvm_node_version }}/lib/node_modules/{{ item.name }}"
  loop: "{{ nvm_install_globally }}"
  when: item.name is defined and item.version is not defined and item.flags is defined


### --------------- END ------------- ####


### ---- Symlink version-agnostic and version-aware global libs
- name: Include symlinking routine
  include: _symlink.yml
### --------------- END ------------- ####
